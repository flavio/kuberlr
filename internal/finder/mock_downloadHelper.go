// Code generated by mockery v2.43.2. DO NOT EDIT.

package finder

import (
	semver "github.com/blang/semver/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockdownloadHelper is an autogenerated mock type for the downloadHelper type
type MockdownloadHelper struct {
	mock.Mock
}

type MockdownloadHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdownloadHelper) EXPECT() *MockdownloadHelper_Expecter {
	return &MockdownloadHelper_Expecter{mock: &_m.Mock}
}

// GetKubectlBinary provides a mock function with given fields: version, destination
func (_m *MockdownloadHelper) GetKubectlBinary(version semver.Version, destination string) error {
	ret := _m.Called(version, destination)

	if len(ret) == 0 {
		panic("no return value specified for GetKubectlBinary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(semver.Version, string) error); ok {
		r0 = rf(version, destination)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdownloadHelper_GetKubectlBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubectlBinary'
type MockdownloadHelper_GetKubectlBinary_Call struct {
	*mock.Call
}

// GetKubectlBinary is a helper method to define mock.On call
//   - version semver.Version
//   - destination string
func (_e *MockdownloadHelper_Expecter) GetKubectlBinary(version interface{}, destination interface{}) *MockdownloadHelper_GetKubectlBinary_Call {
	return &MockdownloadHelper_GetKubectlBinary_Call{Call: _e.mock.On("GetKubectlBinary", version, destination)}
}

func (_c *MockdownloadHelper_GetKubectlBinary_Call) Run(run func(version semver.Version, destination string)) *MockdownloadHelper_GetKubectlBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(semver.Version), args[1].(string))
	})
	return _c
}

func (_c *MockdownloadHelper_GetKubectlBinary_Call) Return(_a0 error) *MockdownloadHelper_GetKubectlBinary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdownloadHelper_GetKubectlBinary_Call) RunAndReturn(run func(semver.Version, string) error) *MockdownloadHelper_GetKubectlBinary_Call {
	_c.Call.Return(run)
	return _c
}

// UpstreamStableVersion provides a mock function with given fields:
func (_m *MockdownloadHelper) UpstreamStableVersion() (semver.Version, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpstreamStableVersion")
	}

	var r0 semver.Version
	var r1 error
	if rf, ok := ret.Get(0).(func() (semver.Version, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() semver.Version); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(semver.Version)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdownloadHelper_UpstreamStableVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpstreamStableVersion'
type MockdownloadHelper_UpstreamStableVersion_Call struct {
	*mock.Call
}

// UpstreamStableVersion is a helper method to define mock.On call
func (_e *MockdownloadHelper_Expecter) UpstreamStableVersion() *MockdownloadHelper_UpstreamStableVersion_Call {
	return &MockdownloadHelper_UpstreamStableVersion_Call{Call: _e.mock.On("UpstreamStableVersion")}
}

func (_c *MockdownloadHelper_UpstreamStableVersion_Call) Run(run func()) *MockdownloadHelper_UpstreamStableVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockdownloadHelper_UpstreamStableVersion_Call) Return(_a0 semver.Version, _a1 error) *MockdownloadHelper_UpstreamStableVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdownloadHelper_UpstreamStableVersion_Call) RunAndReturn(run func() (semver.Version, error)) *MockdownloadHelper_UpstreamStableVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdownloadHelper creates a new instance of MockdownloadHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdownloadHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdownloadHelper {
	mock := &MockdownloadHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
