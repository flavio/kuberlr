// Code generated by mockery v2.43.2. DO NOT EDIT.

package finder

import (
	semver "github.com/blang/semver/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockkubeAPIHelper is an autogenerated mock type for the kubeAPIHelper type
type MockkubeAPIHelper struct {
	mock.Mock
}

type MockkubeAPIHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockkubeAPIHelper) EXPECT() *MockkubeAPIHelper_Expecter {
	return &MockkubeAPIHelper_Expecter{mock: &_m.Mock}
}

// Version provides a mock function with given fields: timeout
func (_m *MockkubeAPIHelper) Version(timeout int64) (semver.Version, error) {
	ret := _m.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 semver.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (semver.Version, error)); ok {
		return rf(timeout)
	}
	if rf, ok := ret.Get(0).(func(int64) semver.Version); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Get(0).(semver.Version)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockkubeAPIHelper_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockkubeAPIHelper_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - timeout int64
func (_e *MockkubeAPIHelper_Expecter) Version(timeout interface{}) *MockkubeAPIHelper_Version_Call {
	return &MockkubeAPIHelper_Version_Call{Call: _e.mock.On("Version", timeout)}
}

func (_c *MockkubeAPIHelper_Version_Call) Run(run func(timeout int64)) *MockkubeAPIHelper_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockkubeAPIHelper_Version_Call) Return(_a0 semver.Version, _a1 error) *MockkubeAPIHelper_Version_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockkubeAPIHelper_Version_Call) RunAndReturn(run func(int64) (semver.Version, error)) *MockkubeAPIHelper_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockkubeAPIHelper creates a new instance of MockkubeAPIHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockkubeAPIHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockkubeAPIHelper {
	mock := &MockkubeAPIHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
